generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum EmployeeRole {
  STAFF //Colaborador comum
  MANAGER //Gestor dos departamentos
  ADMIN //Administrador da empresa
  MASTER //Administrador geral
}

//Departamentos da empresa
enum CompanyDepartment {
  IT
  HR
  MARKETING
  CONTABILITY
  LEGAL
}

//Status da tarefa
enum TaskStatus {
  PENDING
  //Quando considerado finalizado pelo STAFF, será um PARTIAL_DONE (PRECISARÁ DA APROVAÇÃO DO MANAGER RELACIONADO)
  PARTIAL_DONE 
  DONE
  //Quando considerado cancelado pelo STAFF, será um PARTIAL_DONE (PRECISARÁ DA APROVAÇÃO DO MANAGER RELACIONADO)
  PARTIAL_CANCELLED 
  CANCELLED
}

enum TaskPriority {
  CRITICAL //Tarefa que interrompe tudo: Ex: sistema fora do ar
  HIGH // Tarefa de alta urgência. Que bloqueia um ou mais setores do projeto
  MEDIUM // Importante, mas podem esperar
  LOW // Tarefa opcional/melhoria contínua
}

//Tabela de empregados
model Employee {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role EmployeeRole //Importante para controle de acesso
  department CompanyDepartment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relação de empresa vinculada ao funcionário
  companyId String
  company Company @relation(fields: [companyId], references: [id])

  //Relação de tarefas a serem feitas/finalizadas por este EMPLOYEE (em caso de seu ROLE ser STAFF)
  tasks Task[] @relation("assignedToRelation")

  //Relação de tarefas ordenadas por este EMPLOYEE (em caso de seu ROLE ser MANAGER)
  orderedTasks Task[] @relation("assignedByRelation")

  @@map("employees")
}

model Company {
  id String @id @default(uuid())
  cnpj String @unique
  name String
  email String @unique
  departments String @default("CONTABILITY, IT, HR, MARKETING, LEGAL")

  //Relação de funcionários vinculados à empresa
  employees Employee[]

  //Relação de tarefas vinculadas à empresa
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Task {
  id String @id @default(uuid())
  title String
  description String?
  priority TaskPriority
  department CompanyDepartment
  startDate DateTime
  endDate DateTime
  status TaskStatus @default(PENDING)


  companyId String
  company Company @relation(fields: [companyId], references: [id])

  //Referência ao colaborador vinculado a execução tarefa
  assignedToId String
  assignedTo Employee @relation("assignedToRelation", fields: [assignedToId], references: [id]) 

  //Referência ao colaborador que ordenou da tarefa
  assignedById String
  assignedBy Employee @relation("assignedByRelation", fields: [assignedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task")
}